//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Source/Runtime/Input/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using SwipeOrDie.Input;
using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewControls : IInputActionCollection2, IDisposable, IInput
{
    public InputActionAsset asset { get; }
    public @NewControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""Char"",
            ""id"": ""68220dac-7848-4cd7-a5d1-c012e2de6d73"",
            ""actions"": [
                {
                    ""name"": ""Contact"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ee8653df-68fd-40e7-b78a-f0700e2acb1f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""PassThrough"",
                    ""id"": ""58937c95-e7a6-4a79-81f5-d4cfe76df70a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ddaa1941-a27c-4e51-8832-de65ae03a082"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Contact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8fa70207-336a-4b1f-83c9-a57226d5add8"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Char
        m_Char = asset.FindActionMap("Char", throwIfNotFound: true);
        m_Char_Contact = m_Char.FindAction("Contact", throwIfNotFound: true);
        m_Char_Position = m_Char.FindAction("Position", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public Vector2 Direction => 

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Char
    private readonly InputActionMap m_Char;
    private ICharActions m_CharActionsCallbackInterface;
    private readonly InputAction m_Char_Contact;
    private readonly InputAction m_Char_Position;
    public struct CharActions
    {
        private @NewControls m_Wrapper;
        public CharActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Contact => m_Wrapper.m_Char_Contact;
        public InputAction @Position => m_Wrapper.m_Char_Position;
        public InputActionMap Get() { return m_Wrapper.m_Char; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharActions set) { return set.Get(); }
        public void SetCallbacks(ICharActions instance)
        {
            if (m_Wrapper.m_CharActionsCallbackInterface != null)
            {
                @Contact.started -= m_Wrapper.m_CharActionsCallbackInterface.OnContact;
                @Contact.performed -= m_Wrapper.m_CharActionsCallbackInterface.OnContact;
                @Contact.canceled -= m_Wrapper.m_CharActionsCallbackInterface.OnContact;
                @Position.started -= m_Wrapper.m_CharActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_CharActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_CharActionsCallbackInterface.OnPosition;
            }
            m_Wrapper.m_CharActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Contact.started += instance.OnContact;
                @Contact.performed += instance.OnContact;
                @Contact.canceled += instance.OnContact;
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
            }
        }
    }
    public CharActions @Char => new CharActions(this);
    public interface ICharActions
    {
        void OnContact(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
    }
}
