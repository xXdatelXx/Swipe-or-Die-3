//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Source/Runtime/Input/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using SwipeOrDie.Extension;
using SwipeOrDie.Input;
using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class PhoneInput : IInputActionCollection2, IDisposable, IInput
{
    private float _sensitivity;
    public InputActionAsset asset { get; }
    public PhoneInput(float sensevity)
    {
        _sensitivity = sensevity.ThrowExceptionIfValueSubOrEqualZero(nameof(sensevity));
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""New action map"",
            ""id"": ""d1d58c76-4d72-4563-bfad-ba23445e7ea7"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c5ce8b8a-ea90-45ae-b384-7118f7c04cb7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Delta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d7c0dd7b-cd15-4ad1-aceb-57e039868d61"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bd25c096-88d8-4792-aa8f-17d3d2a8582c"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63be3db6-b7b5-4c6d-b149-89f53cd1fc69"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // New action map
        m_Newactionmap = asset.FindActionMap("New action map", throwIfNotFound: true);
        m_Newactionmap_Position = m_Newactionmap.FindAction("Position", throwIfNotFound: true);
        m_Newactionmap_Delta = m_Newactionmap.FindAction("Delta", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public Vector2 Direction
    {
        get
        {
            var delta = m_Newactionmap_Delta.ReadValue<Vector2>();
            var direction = Vector2.zero;

            if (Mathf.Abs(delta.x) > Mathf.Abs(delta.y))
            {
                if (Mathf.Abs(delta.x) > _sensitivity)
                    direction = (delta.x > 0) ? Vector2.right : Vector2.left;
            }
            else
            {
                if (Mathf.Abs(delta.y) > _sensitivity)
                    direction = (delta.y > 0) ? Vector2.up : Vector2.down;
            }

            return direction;
        }
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // New action map
    private readonly InputActionMap m_Newactionmap;
    private INewactionmapActions m_NewactionmapActionsCallbackInterface;
    private readonly InputAction m_Newactionmap_Position;
    private readonly InputAction m_Newactionmap_Delta;
    public struct NewactionmapActions
    {
        private PhoneInput m_Wrapper;
        public NewactionmapActions(PhoneInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_Newactionmap_Position;
        public InputAction @Delta => m_Wrapper.m_Newactionmap_Delta;
        public InputActionMap Get() { return m_Wrapper.m_Newactionmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NewactionmapActions set) { return set.Get(); }
        public void SetCallbacks(INewactionmapActions instance)
        {
            if (m_Wrapper.m_NewactionmapActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnPosition;
                @Delta.started -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnDelta;
                @Delta.performed -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnDelta;
                @Delta.canceled -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnDelta;
            }
            m_Wrapper.m_NewactionmapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Delta.started += instance.OnDelta;
                @Delta.performed += instance.OnDelta;
                @Delta.canceled += instance.OnDelta;
            }
        }
    }
    public NewactionmapActions @Newactionmap => new NewactionmapActions(this);
    public interface INewactionmapActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnDelta(InputAction.CallbackContext context);
    }
}
